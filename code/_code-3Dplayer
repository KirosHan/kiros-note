//
//  3dplay.swift
//  Playerdemo
//
//  Created by Kiros Han on 2016/10/25.
//  Copyright © 2016年 Kiros Han. All rights reserved.
//

import Foundation
import AVFoundation

class My3dplay: NSObject{

    let engine = AVAudioEngine()
    //  let motionManager = CMMotionManager()
    let environment = AVAudioEnvironmentNode()
    var timer:Timer!
    var num = 1.0
    var eastNode:AVAudioPlayerNode!

    func playSound(_ file:String, withExtension ext:String = "wav", atPosition position:AVAudio3DPoint) -> AVAudioPlayerNode {
        let node = AVAudioPlayerNode()
        node.position = position
        node.reverbBlend = 1
        node.renderingAlgorithm = .HRTF

        let url = Bundle.main.url(forResource: file, withExtension: ext)!
        let file = try! AVAudioFile(forReading: url)
        let buffer = AVAudioPCMBuffer(pcmFormat: file.processingFormat, frameCapacity: AVAudioFrameCount(file.length))
        try! file.read(into: buffer)
        engine.attach(node)
        engine.connect(node, to: environment, format: buffer.format)
        node.scheduleBuffer(buffer, at: nil, options: .loops, completionHandler: nil)

        return node
    }


    override init () {

       super.init()
        environment.listenerPosition = AVAudio3DPoint(x: 0, y: 0, z: 0)
        environment.listenerAngularOrientation = AVAudioMake3DAngularOrientation(0.0, 0, 0)

        engine.attach(environment)

        let reverbParameters = environment.reverbParameters
        reverbParameters.enable = true
        reverbParameters.loadFactoryReverbPreset(.largeHall)

        //let westNode = self.playSound("beep-c", atPosition: AVAudio3DPoint(x: 0, y: 0, z: 10))
        // let eastNode = self.playSound("beep-g", atPosition: AVAudio3DPoint(x: 0, y: 10, z: -10))
        eastNode = self.playSound("bird_single", atPosition: AVAudio3DPoint(x: 0, y: 0, z: -90))
        //let northNode = self.playSound("beep-e", atPosition: AVAudio3DPoint(x: 10, y: 0, z: 0))
        //let southNode = self.playSound("beep-bb", atPosition: AVAudio3DPoint(x: -10, y: 0, z: 0))
        let nodes = [eastNode]//[westNode, eastNode, northNode, southNode]

        engine.connect(environment, to: engine.mainMixerNode, format: nil)
        engine.prepare()


       // timer=Timer.scheduledTimer(timeInterval: 1,target:self,selector:#selector(tickDown),userInfo:nil,repeats:true)

        do {
            try engine.start()
            nodes.map({ $0?.play() })
            print("Started")
        } catch let e as NSError {
            print("Couldn't start engine", e)
        }



    }


}
